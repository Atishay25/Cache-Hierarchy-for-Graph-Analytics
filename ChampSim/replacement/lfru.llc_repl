#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (int i = 0 ; i < NUM_SET ; i++ ){
        for ( int j = 0 ; j < NUM_WAY ; j++ ){
            block[i][j].fre = 0;
            block[i][j].lru = 0;
        }
    }
}

uint32_t CACHE::score(uint32_t set, uint32_t way){
    return NUM_WAY + block[set][way].fre - block[set][way].lru;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lfu: " << block[set][way].lru << endl; });

            break;
        }
    }

    // lfu victim
	if(way==NUM_WAY){
		int min_score=score(set, 0);
		way=0;
		for(int i=0;i<NUM_WAY;i++){
			if(min_score > score(set, i)){
                min_score = score(set , i);
				way = i;
			}
		}

		DP ( if (warmup_complete[cpu]) {
		cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
		cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
		cout << dec << " lfu: " << block[set][way].lru << endl; });

	}

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    if (hit && (type == WRITEBACK)) // writeback hit does not update LFU state
        return;

    // update lru replacement state
    for (uint32_t i=0; i<NUM_WAY; i++) {
        if (block[set][i].lru < block[set][way].lru) {
            block[set][i].lru++;
        }
    }
    block[set][way].lru = 0;
	if(hit)	{
        block[set][way].fre++; 
    }
	else{
    	block[set][way].fre = 0;
    }
}

void CACHE::llc_replacement_final_stats()
{

}
